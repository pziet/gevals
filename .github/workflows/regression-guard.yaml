name: Regression Guard
on:
  pull_request:
    branches: [ main ]

jobs:
  eval:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9.0.0
          
      - name: Install dependencies
        run: |
          echo "link-workspace-packages=true" >> .npmrc
          echo "shamefully-hoist=true" >> .npmrc
          pnpm install
          # Verify linking
          ls -la node_modules/@gevals/core || echo "Core package not linked"
          
      - name: Link workspace packages 
        run: |
          echo "Linking workspace packages..."
          # Force pnpm to recreate workspace links
          pnpm install --force
          # Verify core package is linked
          ls -la node_modules/@gevals || echo "No @gevals namespace"
          ls -la node_modules/@gevals/core || echo "Core package not linked"
          
      - name: Start infrastructure
        run: docker compose -f infra/docker-compose.yml up -d

      - name: Debug Project Structure
        run: |
          echo "==== Package.json files ===="
          echo "Root package.json:"
          cat package.json | grep -A5 dependencies || echo "No dependencies section"
          
          echo "Core package.json:"
          cat packages/core/package.json | grep -A10 dependencies || echo "No dependencies section"
          
          echo "CLI package.json:"
          cat apps/cli/package.json | grep -A10 dependencies || echo "No dependencies section"
          
          echo "==== TypeScript Config ===="
          echo "CLI tsconfig.json:"
          cat apps/cli/tsconfig.json
          
          echo "==== Problem Files ===="
          echo "Content of src/commands/data.ts:"
          cat apps/cli/src/commands/data.ts | head -10
          
          echo "Content of src/test-import.ts:"
          cat apps/cli/src/test-import.ts | head -10

      - name: Debug Core Build
        run: |
          echo "Debugging Core Build Issues..."
          echo "Core tsconfig.json:"
          cat packages/core/tsconfig.json
          
          echo "Core package structure:"
          find packages/core/src -type f | sort
          
          echo "Running tsc with verbose logging:"
          cd packages/core
          npx tsc --listFiles --listEmittedFiles
          
      - name: Build Core Package
        run: |
          echo "Building Core Package..."
          cd packages/core
          pnpm build
          echo "Core build completed"
          echo "Files in dist directory:"
          ls -la dist
          # Fail fast if tsc skipped emit (dist is missing or empty)
          if [ ! -d dist ] || [ -z "$(ls -A dist 2>/dev/null)" ]; then
            echo "::error::dist directory is empty â€“ TypeScript emit failed"
            exit 1
          fi
          
      - name: Verify Core Package
        run: |
          echo "Checking Core package installation..."
          ls -la node_modules/@gevals/core/dist || {
            echo "::error::@gevals/core is not linked into node_modules";
            exit 1;
          }

      - name: Build CLI Package
        run: |
          echo "Building CLI Package..."
          cd apps/cli
          # Print the module resolution path
          echo "Module resolution test:"
          # node -e "try { require.resolve('@gevals/core'); console.log('Core module can be resolved!'); } catch(e) { console.log('Core module cannot be resolved:', e.message); }"
          pnpm build || echo "CLI build failed - continuing for debug purposes"
          echo "CLI build attempted"
          
      - name: Build Worker Package
        run: |
          echo "Building Worker Package..."
          cd apps/worker
          pnpm build || echo "Worker build failed - continuing for debug purposes"
          echo "Worker build attempted"
          
      - name: Start worker process
        id: start_worker
        run: |
          # Start worker using the same command as local development
          echo "Starting worker process..."
          pnpm worker:dev > worker.log 2>&1 &
          echo $! > worker_pid
          echo "worker_pid=$!" >> $GITHUB_OUTPUT
          
          # Give worker time to initialize
          sleep 5
          # Display first few log lines to verify startup
          head -10 worker.log || echo "Worker log not available"
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        
      - name: Run baseline evaluation
        run: |
          # Clean baseline results
          rm -rf results/baseline
          
          # list the contents of the current directory
          ls -la
          # List the contents of the configs directory
          ls -la configs/*
          # Run evaluation using CLI via npm script
          pnpm run configs/baseline/baseline.yaml || echo "CLI execution failed"
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          
      - name: Check for regressions
        run: pnpm tsx scripts/check-regression.ts || echo "Regression check failed"
        
      - name: Stop worker process
        if: always() && steps.start_worker.outputs.worker_pid != ''
        run: |
          echo "Worker logs:"
          cat worker.log || echo "Worker log not available"
          kill $(cat worker_pid) || echo "Worker process already stopped"


